function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

% Theta2 has only 1 dim
%Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
  %               num_labels, (hidden_layer_size + 1));

  Theta2 = nn_params(hidden_layer_size * (input_layer_size + 1)+1:size(nn_params));
% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%


% Feedforward 


m = size(X, 1);
A1=[ones(m,1), X];
Z2 = A1*Theta1';
A2=sigmoid(Z2);
A2=[ones(size(A2, 1),1), A2];
%keyboard;
Z3 = A2*Theta2;
A3=sigmoid(Z3);


% technique to change y into matrix
%I = eye(num_labels);
%y_matrix = I(y,:);
y_matrix = y;



J=0;
% for i=1:m
%     for k=1:num_labels
% J = y(i,k)*log(A3(i,k))+(1-y(i,k))*log(1-A3(i,k))+ J;
%     end
% end

J = sum(sum(y_matrix.*log(A3)))+sum(sum((1-y_matrix).*log(1-A3)));

J = J * (-1/m);




% % ignoring the first row and first column
 T1=Theta1(:,2:end);
 T2=Theta2(:,2:end);
% 
% 
% 
% 
  s =sum(sum( T1.^2)) + sum(sum(T2.^2)) ;
% 
  s = s*(lambda/(2*m));
%  
  J= J+s;
%  
% % for debugging keyboard
%% ======  Next : Backpropagation =====
 
% %Hint: We recommend implementing backpropagation using a for-loop
% %               over the training examples if you are implementing it for the 
% %               first time.
% 
% 
%     
% %feedforward
% 
% 
 delta1 = zeros(hidden_layer_size,input_layer_size+1);
 delta2 = zeros(num_labels,hidden_layer_size+1);
 Theta1 = randInitializeWeights(input_layer_size,hidden_layer_size);
 Theta2 = randInitializeWeights(hidden_layer_size,num_labels);
% 
% 
% 
 phi3 = A3 - y_matrix;
% 
% % step 3 error
% keyboard;
 phi2 = (phi3*T2).* sigmoidGradient(Z2);
% %phi2 = phi2(2:end);
% 
% % step 4
% 
% delta1 =  phi2'*A1 + delta1;
% delta2 =  phi3'*A2 + delta2;
% 
% 
% 
% 
% 
% Theta1_grad = (1/m)*delta1 + Theta1*(lambda/m);
% Theta2_grad = (1/m)*delta2 + Theta2*(lambda/m); 
% 
% % -------------------------------------------------------------

% ============================= Grad ============================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
